{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Polyloft",
  "scopeName": "source.polyloft",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#keywords" },
    { "include": "#constants" },
    { "include": "#operators" },
    { "include": "#numbers" },
    { "include": "#annotations" },
    { "include": "#functions" },
    { "include": "#classes" },
    { "include": "#types" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.polyloft",
          "begin": "//",
          "end": "$"
        },
        {
          "name": "comment.block.polyloft",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.polyloft",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.polyloft",
              "match": "\\\\."
            },
            {
              "name": "meta.embedded.expression.polyloft",
              "begin": "#\\{",
              "end": "\\}",
              "patterns": [
                { "include": "$self" }
              ]
            }
          ]
        },
        {
          "name": "string.quoted.single.polyloft",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.polyloft",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.polyloft",
          "match": "\\b(if|elif|else|for|in|loop|break|continue|return|do|end|try|catch|finally|throw)\\b"
        },
        {
          "name": "keyword.control.import.polyloft",
          "match": "\\b(import)\\b"
        },
        {
          "name": "storage.type.class.polyloft",
          "match": "\\b(class|interface|enum|record)\\b"
        },
        {
          "name": "keyword.other.polyloft",
          "match": "\\b(implements|abstract|sealed|instanceof|thread|spawn|join)\\b"
        },
        {
          "name": "storage.type.polyloft",
          "match": "\\b(var|let|const|final|def)\\b"
        },
        {
          "name": "storage.modifier.polyloft",
          "match": "\\b(public|pub|private|priv|protected|prot|static)\\b"
        },
        {
          "name": "variable.language.polyloft",
          "match": "\\b(this|super)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.polyloft",
          "match": "\\b(true|false|nil)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.polyloft",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.polyloft",
          "match": "(&&|\\|\\||!|\\band\\b|\\bor\\b|\\bnot\\b)"
        },
        {
          "name": "keyword.operator.arithmetic.polyloft",
          "match": "(\\+|\\-|\\*|\\/|%)"
        },
        {
          "name": "keyword.operator.assignment.polyloft",
          "match": "(=|:=)"
        },
        {
          "name": "keyword.operator.arrow.polyloft",
          "match": "(=>|->)"
        },
        {
          "name": "keyword.operator.ternary.polyloft",
          "match": "(\\?|:)"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.polyloft",
          "match": "\\b\\d+\\.\\d+f\\b"
        },
        {
          "name": "constant.numeric.double.polyloft",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.polyloft",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.numeric.hex.polyloft",
          "match": "\\b0x[0-9a-fA-F]+\\b"
        }
      ]
    },
    "annotations": {
      "patterns": [
        {
          "name": "storage.type.annotation.polyloft",
          "match": "@\\w+"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.polyloft",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "classes": {
      "patterns": [
        {
          "name": "meta.class.polyloft",
          "match": "(class)\\s+([A-Z][a-zA-Z0-9_]*)(?:\\s*(<)\\s*([A-Z][a-zA-Z0-9_]*))?(?:\\s+(implements)\\s+([A-Z][a-zA-Z0-9_,\\s]+))?",
          "captures": {
            "1": { "name": "storage.type.class.polyloft" },
            "2": { "name": "entity.name.type.class.polyloft" },
            "3": { "name": "keyword.operator.inheritance.polyloft" },
            "4": { "name": "entity.other.inherited-class.polyloft" },
            "5": { "name": "keyword.other.polyloft" },
            "6": { "name": "entity.other.inherited-class.polyloft" }
          }
        },
        {
          "name": "meta.interface.polyloft",
          "match": "(interface)\\s+([A-Z][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "storage.type.class.polyloft" },
            "2": { "name": "entity.name.type.interface.polyloft" }
          }
        },
        {
          "name": "meta.enum.polyloft",
          "match": "(enum)\\s+([A-Z][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "storage.type.class.polyloft" },
            "2": { "name": "entity.name.type.enum.polyloft" }
          }
        },
        {
          "name": "meta.record.polyloft",
          "match": "(record)\\s+([A-Z][a-zA-Z0-9_]*)(?:\\s*\\(([^)]*)\\))?",
          "captures": {
            "1": { "name": "storage.type.class.polyloft" },
            "2": { "name": "entity.name.type.class.polyloft" },
            "3": { "name": "meta.record.parameters.polyloft" }
          }
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.polyloft",
          "match": "\\b(String|Int|Float|Double|Bool|Void|Array|Map|Any)\\b"
        }
      ]
    }
  }
}
