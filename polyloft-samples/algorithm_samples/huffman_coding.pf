// Huffman Coding Compression Algorithm
// Implementation showing encoding process

println("╔════════════════════════════════════════════╗")
println("║   Huffman Coding Compression Algorithm    ║")
println("╚════════════════════════════════════════════╝")
println("")

let text = "HELLO WORLD"
println("Input text: '" + text + "'")
println("Length: " + text.length() + " characters")
println("")

// Character frequencies (manually counted for demo)
let frequencies = {
    H: 1,
    E: 1,
    L: 3,
    O: 2,
    W: 1,
    R: 1,
    D: 1,
    " ": 1
}

println("Character frequencies:")
println("  L: 3 occurrences")
println("  O: 2 occurrences")
println("  H, E, W, R, D, (space): 1 occurrence each")
println("")

// Huffman codes (pre-computed from frequency tree)
let codes = {
    L: "00",
    O: "10",
    H: "010",
    E: "0110",
    W: "1100",
    R: "1101",
    D: "1110",
    " ": "1111"
}

println("Huffman codes assigned:")
println("  L:  00    (most frequent)")
println("  O:  10")
println("  H:  010")
println("  E:  0110")
println("  W:  1100")
println("  R:  1101")
println("  D:  1110")
println("  (space): 1111")
println("")

// Encode the text
println("Encoding process:")
let encoded = ""
let originalBits = text.length() * 8
let encodedBits = 0

// H E L L O   W O R L D
// 010 0110 00 00 10 1111 1100 10 1101 00 1110
println("  H -> 010")
println("  E -> 0110")
println("  L -> 00")
println("  L -> 00")
println("  O -> 10")
println("  (space) -> 1111")
println("  W -> 1100")
println("  O -> 10")
println("  R -> 1101")
println("  L -> 00")
println("  D -> 1110")

encodedBits = 3 + 4 + 2 + 2 + 2 + 4 + 4 + 2 + 4 + 2 + 4

println("")
println("Results:")
println("  Original: " + originalBits + " bits (8 bits per char)")
println("  Encoded: " + encodedBits + " bits")
let saved = originalBits - encodedBits
let ratio = (saved * 100) / originalBits
println("  Saved: " + saved + " bits (" + ratio + "% compression)")
println("")

println("Algorithm properties:")
println("  • Lossless compression (no data loss)")
println("  • Prefix-free codes (no code is prefix of another)")
println("  • Optimal for known character frequencies")
println("  • Time complexity: O(n log n)")
println("  • Used in: ZIP, GZIP, JPEG, MP3")

println("")
println("╔════════════════════════════════════════════╗")
println("║   Huffman Coding Complete!                ║")
println("╚════════════════════════════════════════════╝")
