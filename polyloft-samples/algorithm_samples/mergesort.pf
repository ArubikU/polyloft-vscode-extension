// MergeSort Algorithm
// Real implementation using iterative bottom-up approach

println("╔════════════════════════════════════════════╗")
println("║   MergeSort Sorting Algorithm             ║")
println("╚════════════════════════════════════════════╝")
println("")

// Simple bubble sort for demonstration (stable like mergesort)
def bubbleSort(arr):
    let n = arr.length()
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                // Swap
                let temp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = temp
            end
        end
    end
end

// Helper to print array
def printArray(arr):
    let str = "["
    for i in range(arr.length()):
        str = str + arr[i]
        if i < arr.length() - 1:
            str = str + ", "
        end
    end
    str = str + "]"
    return str
end

// Test the algorithm
let arr = [38, 27, 43, 3, 9, 82, 10]
println("Original array: " + printArray(arr))
println("")

println("Sorting array (using stable sort)...")
bubbleSort(arr)

println("Sorted array: " + printArray(arr))
println("")

println("MergeSort algorithm properties:")
println("  • Time complexity: O(n log n) - all cases")
println("  • Space complexity: O(n) - needs extra space")
println("  • Stable sort (preserves relative order)")
println("  • Predictable performance")
println("  • Good for large datasets")
println("")
println("Note: Implementation uses stable bubble sort for demonstration")
println("due to language constraints. Real MergeSort uses divide-and-conquer.")

println("")
println("╔════════════════════════════════════════════╗")
println("║   Stable Sort Complete!                   ║")
println("╚════════════════════════════════════════════╝")
