{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Polyloft",
  "scopeName": "source.polyloft",
  "fileTypes": [
    "pf"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#classes"
    },
    {
      "include": "#type-annotations"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#builtin-functions"
    },
    {
      "include": "#storage"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.polyloft",
          "match": "//.*$"
        },
        {
          "name": "comment.block.polyloft",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.polyloft",
          "match": "\\b(if|elif|else|for|loop|break|continue|return|in|end|do|try|catch|finally|throw|defer|switch|case|default|where)\\b"
        },
        {
          "name": "keyword.other.polyloft",
          "match": "\\b(import|from|as|export|implements|instanceof|extends|out)\\b"
        }
      ]
    },
    "storage": {
      "patterns": [
        {
          "name": "storage.type.polyloft",
          "match": "\\b(let|var|const|final|def|class|interface|enum|record)\\b"
        },
        {
          "name": "storage.modifier.polyloft",
          "match": "\\b(public|pub|private|priv|protected|prot|static|abstract|sealed)\\b"
        },
        {
          "name": "variable.language.polyloft",
          "match": "\\b(this|super)\\b"
        }
      ]
    },
    "type-annotations": {
      "patterns": [
        {
          "name": "meta.type.annotation.polyloft",
          "match": ":\\s*([A-Z][a-zA-Z0-9_]*)(?:<([A-Z][a-zA-Z0-9_]*(?:\\s*,\\s*[A-Z][a-zA-Z0-9_]*)*)>)?",
          "captures": {
            "1": {
              "name": "entity.name.type.polyloft"
            },
            "2": {
              "name": "entity.name.type.generic.polyloft"
            }
          }
        },
        {
          "name": "meta.return.type.polyloft",
          "match": "->\\s*([A-Z][a-zA-Z0-9_]*)(?:<([A-Z][a-zA-Z0-9_]*(?:\\s*,\\s*[A-Z][a-zA-Z0-9_]*)*)>)?",
          "captures": {
            "1": {
              "name": "entity.name.type.polyloft"
            },
            "2": {
              "name": "entity.name.type.generic.polyloft"
            }
          }
        },
        {
          "name": "entity.name.type.builtin.polyloft",
          "match": "\\b(Int|Float|String|Bool|Array|Map|List|Set|Deque|Tuple|Pair|Range|Bytes|Promise|CompletableFuture|HttpServer|HttpRequest|HttpResponse|Any|Void)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.polyloft",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.polyloft",
              "match": "\\\\."
            },
            {
              "name": "meta.embedded.line.polyloft",
              "begin": "#\\{",
              "end": "\\}",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          ]
        },
        {
          "name": "string.quoted.single.polyloft",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.polyloft",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.polyloft",
          "match": "\\b0x[0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.binary.polyloft",
          "match": "\\b0b[01]+\\b"
        },
        {
          "name": "constant.numeric.float.polyloft",
          "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?f?\\b"
        },
        {
          "name": "constant.numeric.integer.polyloft",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.polyloft",
          "match": "\\b(def)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": {
              "name": "storage.type.function.polyloft"
            },
            "2": {
              "name": "entity.name.function.polyloft"
            }
          }
        },
        {
          "name": "entity.name.function.polyloft",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "classes": {
      "patterns": [
        {
          "name": "meta.class.polyloft",
          "match": "\\b(class)\\s+([A-Z][a-zA-Z0-9_]*)(?:\\s*<\\s*([A-Z][a-zA-Z0-9_,\\s]*)\\s*>)?\\s*(?:<\\s*([A-Z][a-zA-Z0-9_]*))?",
          "captures": {
            "1": {
              "name": "storage.type.class.polyloft"
            },
            "2": {
              "name": "entity.name.class.polyloft"
            },
            "3": {
              "name": "entity.name.type.generic.polyloft"
            },
            "4": {
              "name": "entity.other.inherited-class.polyloft"
            }
          }
        },
        {
          "name": "meta.interface.polyloft",
          "match": "\\b(interface)\\s+([A-Z][a-zA-Z0-9_]*)(?:\\s*<\\s*([A-Z][a-zA-Z0-9_,\\s]*)\\s*>)?",
          "captures": {
            "1": {
              "name": "storage.type.interface.polyloft"
            },
            "2": {
              "name": "entity.name.interface.polyloft"
            },
            "3": {
              "name": "entity.name.type.generic.polyloft"
            }
          }
        },
        {
          "name": "meta.enum.polyloft",
          "match": "\\b(enum)\\s+([A-Z][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "storage.type.enum.polyloft"
            },
            "2": {
              "name": "entity.name.enum.polyloft"
            }
          }
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.polyloft",
          "match": "\\b(true|false|nil|null)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.polyloft",
          "match": "\\+|\\-|\\*|\\/|%"
        },
        {
          "name": "keyword.operator.comparison.polyloft",
          "match": "==|!=|<=|>=|<|>"
        },
        {
          "name": "keyword.operator.logical.polyloft",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.assignment.polyloft",
          "match": "=|\\+=|-=|\\*=|/="
        },
        {
          "name": "keyword.operator.range.polyloft",
          "match": "\\.\\.\\."
        },
        {
          "name": "keyword.operator.arrow.polyloft",
          "match": "->|=>"
        }
      ]
    },
    "builtin-functions": {
      "patterns": [
        {
          "name": "support.function.builtin.polyloft",
          "match": "\\b(println|print|len|range|int|float|str|bool)\\b"
        },
        {
          "name": "support.class.builtin.polyloft",
          "match": "\\b(Sys|Array|String|Map|Set|List|Tuple|Deque|Range|Bytes|Generic|Object|Cronometer|Math|Net|Http|IO|File|Socket|Promise|CompletableFuture)\\b"
        }
      ]
    }
  }
}
